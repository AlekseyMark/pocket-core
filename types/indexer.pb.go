// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/indexer.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxResultSlim struct {
	Height      uint32        `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Index       uint32        `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Code        CodeType      `protobuf:"varint,3,opt,name=code,proto3,casttype=CodeType" json:"code,omitempty"`
	Codespace   CodespaceType `protobuf:"bytes,4,opt,name=codespace,proto3,casttype=CodespaceType" json:"codespace,omitempty"`
	Tx          []byte        `protobuf:"bytes,5,opt,name=Tx,proto3" json:"Tx,omitempty"`
	Signer      []byte        `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
	Recepient   []byte        `protobuf:"bytes,7,opt,name=recepient,proto3" json:"recepient,omitempty"`
	MessageType string        `protobuf:"bytes,8,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
}

func (m *TxResultSlim) Reset()      { *m = TxResultSlim{} }
func (*TxResultSlim) ProtoMessage() {}
func (*TxResultSlim) Descriptor() ([]byte, []int) {
	return fileDescriptor_8db40cd570db74b7, []int{0}
}
func (m *TxResultSlim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxResultSlim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxResultSlim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxResultSlim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResultSlim.Merge(m, src)
}
func (m *TxResultSlim) XXX_Size() int {
	return m.Size()
}
func (m *TxResultSlim) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResultSlim.DiscardUnknown(m)
}

var xxx_messageInfo_TxResultSlim proto.InternalMessageInfo

func (m *TxResultSlim) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxResultSlim) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxResultSlim) GetCode() CodeType {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TxResultSlim) GetCodespace() CodespaceType {
	if m != nil {
		return m.Codespace
	}
	return ""
}

func (m *TxResultSlim) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxResultSlim) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *TxResultSlim) GetRecepient() []byte {
	if m != nil {
		return m.Recepient
	}
	return nil
}

func (m *TxResultSlim) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func init() {
	proto.RegisterType((*TxResultSlim)(nil), "types.TxResultSlim")
}

func init() { proto.RegisterFile("types/indexer.proto", fileDescriptor_8db40cd570db74b7) }

var fileDescriptor_8db40cd570db74b7 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x4f, 0x3a, 0x31,
	0x18, 0xc6, 0xaf, 0xf7, 0x07, 0xfe, 0x50, 0x0f, 0x13, 0x2b, 0x31, 0x8d, 0x31, 0xe5, 0x74, 0xc2,
	0x01, 0x6e, 0x70, 0x73, 0x84, 0xc1, 0xb8, 0x9e, 0x37, 0xb9, 0x18, 0x38, 0xde, 0x1c, 0x0d, 0x70,
	0x6d, 0xda, 0x12, 0x8f, 0xcd, 0xf8, 0x09, 0xfc, 0x08, 0x7e, 0x1c, 0x47, 0x46, 0x06, 0x43, 0x14,
	0x16, 0x3f, 0x03, 0x93, 0x69, 0xc1, 0x30, 0xb5, 0xcf, 0xef, 0x79, 0xd3, 0xa7, 0xef, 0x83, 0x4f,
	0xcd, 0x5c, 0x82, 0x8e, 0x78, 0x3e, 0x84, 0x02, 0x54, 0x47, 0x2a, 0x61, 0x04, 0x29, 0x3b, 0x78,
	0xde, 0xc8, 0x44, 0x26, 0x1c, 0x89, 0xec, 0x6d, 0x67, 0x5e, 0xbd, 0xfa, 0x38, 0x48, 0x8a, 0x18,
	0xf4, 0x6c, 0x62, 0x1e, 0x26, 0x7c, 0x4a, 0xce, 0x70, 0x65, 0x04, 0x3c, 0x1b, 0x19, 0x8a, 0x42,
	0xd4, 0xaa, 0xc7, 0x7b, 0x45, 0x1a, 0xb8, 0x7c, 0x6f, 0x9f, 0xa5, 0xbe, 0xc3, 0x3b, 0x41, 0x42,
	0x5c, 0x4a, 0xc5, 0x10, 0xe8, 0x3f, 0x0b, 0xbb, 0xc1, 0x76, 0xd5, 0xac, 0xf6, 0xc4, 0x10, 0x92,
	0xb9, 0x84, 0xd8, 0x39, 0x24, 0xc2, 0x35, 0x7b, 0x6a, 0xd9, 0x4f, 0x81, 0x96, 0x42, 0xd4, 0xaa,
	0x75, 0x4f, 0xb6, 0xab, 0x66, 0xbd, 0xf7, 0x07, 0xdd, 0xec, 0x61, 0x86, 0x1c, 0x63, 0x3f, 0x29,
	0x68, 0x39, 0x44, 0xad, 0x20, 0xf6, 0x93, 0xc2, 0x7e, 0x48, 0xf3, 0x2c, 0x07, 0x45, 0x2b, 0x8e,
	0xed, 0x15, 0xb9, 0xc0, 0x35, 0x05, 0x29, 0x48, 0x0e, 0xb9, 0xa1, 0xff, 0x9d, 0x75, 0x00, 0xe4,
	0x12, 0x07, 0x53, 0xd0, 0xba, 0x9f, 0xc1, 0x93, 0x5d, 0x9f, 0x56, 0x6d, 0x72, 0x7c, 0xb4, 0x67,
	0x36, 0xf3, 0xb6, 0xfa, 0xf3, 0xde, 0x44, 0x2f, 0x9f, 0x21, 0xea, 0xde, 0x2d, 0xbf, 0x99, 0xf7,
	0xb1, 0x66, 0x68, 0xb1, 0x66, 0xe8, 0x6b, 0xcd, 0xd0, 0xdb, 0x86, 0x79, 0x8b, 0x0d, 0xf3, 0x96,
	0x1b, 0xe6, 0x3d, 0x5e, 0x67, 0xdc, 0x8c, 0x66, 0x83, 0x4e, 0x2a, 0xa6, 0x91, 0x14, 0x63, 0xd3,
	0xce, 0xc1, 0x3c, 0x0b, 0x35, 0x8e, 0xa4, 0x48, 0xc7, 0x60, 0xda, 0xa9, 0x50, 0x10, 0xb9, 0x8e,
	0x07, 0x15, 0x57, 0xea, 0xcd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xd5, 0x02, 0xda, 0x88,
	0x01, 0x00, 0x00,
}

func (this *TxResultSlim) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxResultSlim)
	if !ok {
		that2, ok := that.(TxResultSlim)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Codespace != that1.Codespace {
		return false
	}
	if !bytes.Equal(this.Tx, that1.Tx) {
		return false
	}
	if !bytes.Equal(this.Signer, that1.Signer) {
		return false
	}
	if !bytes.Equal(this.Recepient, that1.Recepient) {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	return true
}
func (m *TxResultSlim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxResultSlim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxResultSlim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Recepient) > 0 {
		i -= len(m.Recepient)
		copy(dAtA[i:], m.Recepient)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.Recepient)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Codespace) > 0 {
		i -= len(m.Codespace)
		copy(dAtA[i:], m.Codespace)
		i = encodeVarintIndexer(dAtA, i, uint64(len(m.Codespace)))
		i--
		dAtA[i] = 0x22
	}
	if m.Code != 0 {
		i = encodeVarintIndexer(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintIndexer(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintIndexer(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndexer(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndexer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxResultSlim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovIndexer(uint64(m.Height))
	}
	if m.Index != 0 {
		n += 1 + sovIndexer(uint64(m.Index))
	}
	if m.Code != 0 {
		n += 1 + sovIndexer(uint64(m.Code))
	}
	l = len(m.Codespace)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.Recepient)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	return n
}

func sovIndexer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndexer(x uint64) (n int) {
	return sovIndexer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TxResultSlim) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxResultSlim{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Codespace:` + fmt.Sprintf("%v", this.Codespace) + `,`,
		`Tx:` + fmt.Sprintf("%v", this.Tx) + `,`,
		`Signer:` + fmt.Sprintf("%v", this.Signer) + `,`,
		`Recepient:` + fmt.Sprintf("%v", this.Recepient) + `,`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIndexer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TxResultSlim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxResultSlim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxResultSlim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codespace = CodespaceType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recepient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recepient = append(m.Recepient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recepient == nil {
				m.Recepient = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndexer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndexer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndexer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndexer = fmt.Errorf("proto: unexpected end of group")
)
